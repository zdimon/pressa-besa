{"version":3,"file":"ra-data-django-rest-framework.cjs.production.min.js","sources":["../src/index.ts","../src/tokenAuthProvider.ts"],"sourcesContent":["import { stringify } from 'query-string';\nimport {\n  Identifier,\n  Pagination,\n  Sort,\n  Filter,\n  fetchUtils,\n  DataProvider,\n} from 'ra-core';\n\nexport {\n  default as tokenAuthProvider,\n  fetchJsonWithAuthToken,\n} from './tokenAuthProvider';\n\nconst getPaginationQuery = (pagination: Pagination) => {\n  return {\n    page: pagination.page,\n    page_size: pagination.perPage,\n  };\n};\n\nconst getFilterQuery = (filter: Filter) => {\n  const { q: search, ...otherSearchParams } = filter;\n  return {\n    ...otherSearchParams,\n    search,\n  };\n};\n\nexport const getOrderingQuery = (sort: Sort) => {\n  const { field, order } = sort;\n  return {\n    ordering: `${order === 'ASC' ? '' : '-'}${field}`,\n  };\n};\n\nexport default (\n  apiUrl: String,\n  httpClient: Function = fetchUtils.fetchJson\n): DataProvider => {\n  const getOneJson = (resource: String, id: Identifier) =>\n    httpClient(`${apiUrl}/${resource}/${id}/`).then(\n      (response: Response) => response.json\n    );\n\n  return {\n    getList: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    getOne: async (resource, params) => {\n      const data = await getOneJson(resource, params.id);\n      return {\n        data,\n      };\n    },\n\n    getMany: (resource, params) => {\n      return Promise.all(\n        params.ids.map(id => getOneJson(resource, id))\n      ).then(data => ({ data }));\n    },\n\n    getManyReference: async (resource, params) => {\n      const query = {\n        ...getFilterQuery(params.filter),\n        ...getPaginationQuery(params.pagination),\n        ...getOrderingQuery(params.sort),\n        [params.target]: params.id,\n      };\n      const url = `${apiUrl}/${resource}/?${stringify(query)}`;\n\n      const { json } = await httpClient(url);\n      return {\n        data: json.results,\n        total: json.count,\n      };\n    },\n\n    update: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'PATCH',\n        body: JSON.stringify(params.data),\n      });\n      return { data: json };\n    },\n\n    updateMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'PATCH',\n            body: JSON.stringify(params.data),\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n\n    create: async (resource, params) => {\n      const { json } = await httpClient(`${apiUrl}/${resource}/`, {\n        method: 'POST',\n        body: JSON.stringify(params.data),\n      });\n      return {\n        data: { ...json },\n      };\n    },\n\n    delete: (resource, params) =>\n      httpClient(`${apiUrl}/${resource}/${params.id}/`, {\n        method: 'DELETE',\n      }).then(() => ({ data: params.previousData })),\n\n    deleteMany: (resource, params) =>\n      Promise.all(\n        params.ids.map(id =>\n          httpClient(`${apiUrl}/${resource}/${id}/`, {\n            method: 'DELETE',\n          })\n        )\n      ).then(responses => ({ data: responses.map(({ json }) => json.id) })),\n  };\n};\n","import { AuthProvider, fetchUtils } from 'ra-core';\n\nexport interface Options {\n  obtainAuthTokenUrl?: string;\n}\n\nfunction tokenAuthProvider(options: Options = {}): AuthProvider {\n  const opts = {\n    obtainAuthTokenUrl: '/api-token-auth/',\n    ...options,\n  };\n  return {\n    login: async ({ username, password }) => {\n      const request = new Request(opts.obtainAuthTokenUrl, {\n        method: 'POST',\n        body: JSON.stringify({ username, password }),\n        headers: new Headers({ 'Content-Type': 'application/json' }),\n      });\n      const response = await fetch(request);\n      if (response.ok) {\n        localStorage.setItem('token', (await response.json()).token);\n        return;\n      }\n      if (response.headers.get('content-type') !== 'application/json') {\n        throw new Error(response.statusText);\n      }\n\n      const json = await response.json();\n      const error = json.non_field_errors;\n      throw new Error(error || response.statusText);\n    },\n    logout: () => {\n      localStorage.removeItem('token');\n      return Promise.resolve();\n    },\n    checkAuth: () =>\n      localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\n    checkError: error => {\n      const status = error.status;\n      if (status === 401 || status === 403) {\n        localStorage.removeItem('token');\n        return Promise.reject();\n      }\n      return Promise.resolve();\n    },\n    getPermissions: () => {\n      return Promise.resolve();\n    },\n  };\n}\n\nexport function createOptionsFromToken() {\n  const token = localStorage.getItem('token');\n  if (!token) {\n    return {};\n  }\n  return {\n    user: {\n      authenticated: true,\n      token: 'Token ' + token,\n    },\n  };\n}\n\nexport function fetchJsonWithAuthToken(url: string, options: object) {\n  return fetchUtils.fetchJson(\n    url,\n    Object.assign(createOptionsFromToken(), options)\n  );\n}\n\nexport default tokenAuthProvider;\n"],"names":["getPaginationQuery","pagination","page","page_size","perPage","getFilterQuery","filter","search","q","getOrderingQuery","sort","ordering","order","field","apiUrl","httpClient","fetchUtils","fetchJson","getOneJson","resource","id","then","response","json","getList","params","query","url","stringify","data","results","total","count","getOne","getMany","Promise","all","ids","map","getManyReference","target","update","method","body","JSON","updateMany","responses","create","delete","previousData","deleteMany","options","Object","assign","token","localStorage","getItem","user","authenticated","opts","obtainAuthTokenUrl","login","username","password","request","Request","headers","Headers","fetch","get","Error","statusText","non_field_errors","ok","_localStorage2","setItem","_response$json","logout","removeItem","resolve","checkAuth","reject","checkError","error","status","getPermissions"],"mappings":"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"}