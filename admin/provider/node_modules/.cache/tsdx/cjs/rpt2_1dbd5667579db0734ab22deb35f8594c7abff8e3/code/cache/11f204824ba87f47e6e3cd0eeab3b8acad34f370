{"code":"import { stringify } from 'query-string';\r\nimport { fetchUtils, } from 'ra-core';\r\nexport { default as tokenAuthProvider, fetchJsonWithAuthToken, } from './tokenAuthProvider';\r\nconst getPaginationQuery = (pagination) => {\r\n    return {\r\n        page: pagination.page,\r\n        page_size: pagination.perPage,\r\n    };\r\n};\r\nconst getFilterQuery = (filter) => {\r\n    const { q: search, ...otherSearchParams } = filter;\r\n    return {\r\n        ...otherSearchParams,\r\n        search,\r\n    };\r\n};\r\nexport const getOrderingQuery = (sort) => {\r\n    const { field, order } = sort;\r\n    return {\r\n        ordering: `${order === 'ASC' ? '' : '-'}${field}`,\r\n    };\r\n};\r\nexport default (apiUrl, httpClient = fetchUtils.fetchJson) => {\r\n    const getOneJson = (resource, id) => httpClient(`${apiUrl}/${resource}/${id}/`).then((response) => response.json);\r\n    return {\r\n        getList: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n            };\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const { json } = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        getOne: async (resource, params) => {\r\n            const data = await getOneJson(resource, params.id);\r\n            return {\r\n                data,\r\n            };\r\n        },\r\n        getMany: (resource, params) => {\r\n            return Promise.all(params.ids.map(id => getOneJson(resource, id))).then(data => ({ data }));\r\n        },\r\n        getManyReference: async (resource, params) => {\r\n            const query = {\r\n                ...getFilterQuery(params.filter),\r\n                ...getPaginationQuery(params.pagination),\r\n                ...getOrderingQuery(params.sort),\r\n                [params.target]: params.id,\r\n            };\r\n            const url = `${apiUrl}/${resource}/?${stringify(query)}`;\r\n            const { json } = await httpClient(url);\r\n            return {\r\n                data: json.results,\r\n                total: json.count,\r\n            };\r\n        },\r\n        update: async (resource, params) => {\r\n            const { json } = await httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n                method: 'PATCH',\r\n                body: JSON.stringify(params.data),\r\n            });\r\n            return { data: json };\r\n        },\r\n        updateMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n            method: 'PATCH',\r\n            body: JSON.stringify(params.data),\r\n        }))).then(responses => ({ data: responses.map(({ json }) => json.id) })),\r\n        create: async (resource, params) => {\r\n            const { json } = await httpClient(`${apiUrl}/${resource}/`, {\r\n                method: 'POST',\r\n                body: JSON.stringify(params.data),\r\n            });\r\n            return {\r\n                data: { ...json },\r\n            };\r\n        },\r\n        delete: (resource, params) => httpClient(`${apiUrl}/${resource}/${params.id}/`, {\r\n            method: 'DELETE',\r\n        }).then(() => ({ data: params.previousData })),\r\n        deleteMany: (resource, params) => Promise.all(params.ids.map(id => httpClient(`${apiUrl}/${resource}/${id}/`, {\r\n            method: 'DELETE',\r\n        }))).then(responses => ({ data: responses.map(({ json }) => json.id) })),\r\n    };\r\n};\r\n//# sourceMappingURL=index.js.map","references":["/home/zdimon/Desktop/work/pressa-besa/admin/provider/node_modules/query-string/index.d.ts","/home/zdimon/Desktop/work/pressa-besa/admin/provider/node_modules/ra-core/esm/index.d.ts","/home/zdimon/Desktop/work/pressa-besa/admin/provider/src/tokenAuthProvider.ts"],"map":"{\"version\":3,\"file\":\"index.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/index.ts\"],\"names\":[],\"mappings\":\"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\"}","dts":{"name":"/home/zdimon/Desktop/work/pressa-besa/admin/provider/index.d.ts","writeByteOrderMark":false,"text":"import { Sort, DataProvider } from 'ra-core';\r\nexport { default as tokenAuthProvider, fetchJsonWithAuthToken, } from './tokenAuthProvider';\r\nexport declare const getOrderingQuery: (sort: Sort) => {\r\n    ordering: string;\r\n};\r\ndeclare const _default: (apiUrl: String, httpClient?: Function) => DataProvider;\r\nexport default _default;\r\n"}}
