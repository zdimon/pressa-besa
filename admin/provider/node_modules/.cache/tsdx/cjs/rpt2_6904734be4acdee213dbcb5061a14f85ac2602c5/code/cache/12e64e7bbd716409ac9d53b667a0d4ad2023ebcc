{"code":"import { fetchUtils } from 'ra-core';\r\nfunction tokenAuthProvider(options = {}) {\r\n    const opts = {\r\n        obtainAuthTokenUrl: '/api-token-auth/',\r\n        ...options,\r\n    };\r\n    return {\r\n        login: async ({ username, password }) => {\r\n            const request = new Request(opts.obtainAuthTokenUrl, {\r\n                method: 'POST',\r\n                body: JSON.stringify({ username, password }),\r\n                headers: new Headers({ 'Content-Type': 'application/json' }),\r\n            });\r\n            const response = await fetch(request);\r\n            if (response.ok) {\r\n                localStorage.setItem('token', (await response.json()).token);\r\n                return;\r\n            }\r\n            if (response.headers.get('content-type') !== 'application/json') {\r\n                throw new Error(response.statusText);\r\n            }\r\n            const json = await response.json();\r\n            const error = json.non_field_errors;\r\n            throw new Error(error || response.statusText);\r\n        },\r\n        logout: () => {\r\n            localStorage.removeItem('token');\r\n            return Promise.resolve();\r\n        },\r\n        checkAuth: () => localStorage.getItem('token') ? Promise.resolve() : Promise.reject(),\r\n        checkError: error => {\r\n            const status = error.status;\r\n            if (status === 401 || status === 403) {\r\n                localStorage.removeItem('token');\r\n                return Promise.reject();\r\n            }\r\n            return Promise.resolve();\r\n        },\r\n        getPermissions: () => {\r\n            return Promise.resolve();\r\n        },\r\n    };\r\n}\r\nexport function createOptionsFromToken() {\r\n    const token = localStorage.getItem('token');\r\n    if (!token) {\r\n        return {};\r\n    }\r\n    return {\r\n        user: {\r\n            authenticated: true,\r\n            token: 'Token ' + token,\r\n        },\r\n    };\r\n}\r\nexport function fetchJsonWithAuthToken(url, options) {\r\n    return fetchUtils.fetchJson(url, Object.assign(createOptionsFromToken(), options));\r\n}\r\nexport default tokenAuthProvider;\r\n//# sourceMappingURL=tokenAuthProvider.js.map","references":["/home/zdimon/Desktop/work/pressa-besa/admin/provider/node_modules/ra-core/esm/index.d.ts"],"map":"{\"version\":3,\"file\":\"tokenAuthProvider.js\",\"sourceRoot\":\"\",\"sources\":[\"../../../../../src/tokenAuthProvider.ts\"],\"names\":[],\"mappings\":\"AAAA,OAAO,EAAgB,UAAU,EAAE,MAAM,SAAS,CAAC;AAMnD,SAAS,iBAAiB,CAAC,UAAmB,EAAE;IAC9C,MAAM,IAAI,GAAG;QACX,kBAAkB,EAAE,kBAAkB;QACtC,GAAG,OAAO;KACX,CAAC;IACF,OAAO;QACL,KAAK,EAAE,KAAK,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAE,EAAE;YACtC,MAAM,OAAO,GAAG,IAAI,OAAO,CAAC,IAAI,CAAC,kBAAkB,EAAE;gBACnD,MAAM,EAAE,MAAM;gBACd,IAAI,EAAE,IAAI,CAAC,SAAS,CAAC,EAAE,QAAQ,EAAE,QAAQ,EAAE,CAAC;gBAC5C,OAAO,EAAE,IAAI,OAAO,CAAC,EAAE,cAAc,EAAE,kBAAkB,EAAE,CAAC;aAC7D,CAAC,CAAC;YACH,MAAM,QAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,CAAC,CAAC;YACtC,IAAI,QAAQ,CAAC,EAAE,EAAE;gBACf,YAAY,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC;gBAC7D,OAAO;aACR;YACD,IAAI,QAAQ,CAAC,OAAO,CAAC,GAAG,CAAC,cAAc,CAAC,KAAK,kBAAkB,EAAE;gBAC/D,MAAM,IAAI,KAAK,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;aACtC;YAED,MAAM,IAAI,GAAG,MAAM,QAAQ,CAAC,IAAI,EAAE,CAAC;YACnC,MAAM,KAAK,GAAG,IAAI,CAAC,gBAAgB,CAAC;YACpC,MAAM,IAAI,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,UAAU,CAAC,CAAC;QAChD,CAAC;QACD,MAAM,EAAE,GAAG,EAAE;YACX,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;YACjC,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;QACD,SAAS,EAAE,GAAG,EAAE,CACd,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,EAAE;QACtE,UAAU,EAAE,KAAK,CAAC,EAAE;YAClB,MAAM,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC5B,IAAI,MAAM,KAAK,GAAG,IAAI,MAAM,KAAK,GAAG,EAAE;gBACpC,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;gBACjC,OAAO,OAAO,CAAC,MAAM,EAAE,CAAC;aACzB;YACD,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;QACD,cAAc,EAAE,GAAG,EAAE;YACnB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;QAC3B,CAAC;KACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB;IACpC,MAAM,KAAK,GAAG,YAAY,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;IAC5C,IAAI,CAAC,KAAK,EAAE;QACV,OAAO,EAAE,CAAC;KACX;IACD,OAAO;QACL,IAAI,EAAE;YACJ,aAAa,EAAE,IAAI;YACnB,KAAK,EAAE,QAAQ,GAAG,KAAK;SACxB;KACF,CAAC;AACJ,CAAC;AAED,MAAM,UAAU,sBAAsB,CAAC,GAAW,EAAE,OAAe;IACjE,OAAO,UAAU,CAAC,SAAS,CACzB,GAAG,EACH,MAAM,CAAC,MAAM,CAAC,sBAAsB,EAAE,EAAE,OAAO,CAAC,CACjD,CAAC;AACJ,CAAC;AAED,eAAe,iBAAiB,CAAC\"}","dts":{"name":"/home/zdimon/Desktop/work/pressa-besa/admin/provider/tokenAuthProvider.d.ts","writeByteOrderMark":false,"text":"import { AuthProvider } from 'ra-core';\r\nexport interface Options {\r\n    obtainAuthTokenUrl?: string;\r\n}\r\ndeclare function tokenAuthProvider(options?: Options): AuthProvider;\r\nexport declare function createOptionsFromToken(): {\r\n    user?: undefined;\r\n} | {\r\n    user: {\r\n        authenticated: boolean;\r\n        token: string;\r\n    };\r\n};\r\nexport declare function fetchJsonWithAuthToken(url: string, options: object): Promise<{\r\n    status: number;\r\n    headers: Headers;\r\n    body: string;\r\n    json: any;\r\n}>;\r\nexport default tokenAuthProvider;\r\n"}}
